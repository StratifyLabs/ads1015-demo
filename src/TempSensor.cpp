

#include <sapi/calc.hpp>

#include "TempSensor.hpp"

#define NUM_ENTRIES (208)
const float resistance_to_temp_lookup_table[NUM_ENTRIES*2] = { //for each entry there are 2 float values
		237.00	,	150	,
		242.30	,	149	,
		247.80	,	148	,
		253.40	,	147	,
		259.20	,	146	,
		265.10	,	145	,
		271.20	,	144	,
		277.40	,	143	,
		283.80	,	142	,
		290.40	,	141	,
		297.20	,	140	,
		304.20	,	139	,
		311.30	,	138	,
		318.70	,	137	,
		326.30	,	136	,
		334.00	,	135	,
		342.00	,	134	,
		350.30	,	133	,
		358.70	,	132	,
		367.40	,	131	,
		376.40	,	130	,
		385.60	,	129	,
		395.10	,	128	,
		404.90	,	127	,
		414.90	,	126	,
		425.30	,	125	,
		435.90	,	124	,
		446.90	,	123	,
		458.20	,	122	,
		469.80	,	121	,
		481.80	,	120	,
		494.10	,	119	,
		506.80	,	118	,
		519.90	,	117	,
		533.40	,	116	,
		547.30	,	115	,
		561.60	,	114	,
		576.40	,	113	,
		591.60	,	112	,
		607.40	,	111	,
		623.60	,	110	,
		640.30	,	109	,
		657.50	,	108	,
		675.30	,	107	,
		693.60	,	106	,
		712.60	,	105	,
		732.10	,	104	,
		752.30	,	103	,
		773.10	,	102	,
		794.60	,	101	,
		816.80	,	100	,
		839.70	,	99	,
		863.40	,	98	,
		887.90	,	97	,
		913.20	,	96	,
		939.30	,	95	,
		966.30	,	94	,
		994.20	,	93	,
		1023.00	,	92	,
		1053.00	,	91	,
		1084.00	,	90	,
		1116.00	,	89	,
		1149.00	,	88	,
		1183.00	,	87	,
		1218.00	,	86	,
		1255.00	,	85	,
		1293.00	,	84	,
		1332.00	,	83	,
		1372.00	,	82	,
		1414.00	,	81	,
		1458.00	,	80	,
		1503.00	,	79	,
		1550.00	,	78	,
		1598.00	,	77	,
		1648.00	,	76	,
		1700.00	,	75	,
		1754.00	,	74	,
		1810.00	,	73	,
		1868.00	,	72	,
		1928.00	,	71	,
		1990.00	,	70	,
		2055.00	,	69	,
		2122.00	,	68	,
		2191.00	,	67	,
		2264.00	,	66	,
		2339.00	,	65	,
		2417.00	,	64	,
		2498.00	,	63	,
		2582.00	,	62	,
		2669.00	,	61	,
		2760.00	,	60	,
		2854.00	,	59	,
		2952.00	,	58	,
		3054.00	,	57	,
		3160.00	,	56	,
		3271.00	,	55	,
		3385.00	,	54	,
		3505.00	,	53	,
		3629.00	,	52	,
		3758.00	,	51	,
		3893.00	,	50	,
		4033.00	,	49	,
		4179.00	,	48	,
		4331.00	,	47	,
		4490.00	,	46	,
		4655.00	,	45	,
		4827.00	,	44	,
		5007.00	,	43	,
		5194.00	,	42	,
		5389.00	,	41	,
		5592.00	,	40	,
		5805.00	,	39	,
		6027.00	,	38	,
		6258.00	,	37	,
		6500.00	,	36	,
		6752.00	,	35	,
		7016.00	,	34	,
		7291.00	,	33	,
		7579.00	,	32	,
		7879.00	,	31	,
		8194.00	,	30	,
		8522.00	,	29	,
		8866.00	,	28	,
		9226.00	,	27	,
		9602.00	,	26	,
		10000.00	,	25	,
		10410.00	,	24	,
		10840.00	,	23	,
		11290.00	,	22	,
		11770.00	,	21	,
		12260.00	,	20	,
		12780.00	,	19	,
		13330.00	,	18	,
		13900.00	,	17	,
		14500.00	,	16	,
		15130.00	,	15	,
		15790.00	,	14	,
		16480.00	,	13	,
		17210.00	,	12	,
		17980.00	,	11	,
		18780.00	,	10	,
		19620.00	,	9	,
		20510.00	,	8	,
		21440.00	,	7	,
		22430.00	,	6	,
		23460.00	,	5	,
		24540.00	,	4	,
		25690.00	,	3	,
		26890.00	,	2	,
		28160.00	,	1	,
		29490.00	,	0	,
		30890.00	,	-1	,
		32370.00	,	-2	,
		33930.00	,	-3	,
		35580.00	,	-4	,
		37310.00	,	-5	,
		39140.00	,	-6	,
		41080.00	,	-7	,
		43110.00	,	-8	,
		45270.00	,	-9	,
		47540.00	,	-10	,
		49950.00	,	-11	,
		52490.00	,	-12	,
		55170.00	,	-13	,
		58010.00	,	-14	,
		61020.00	,	-15	,
		64200.00	,	-16	,
		67570.00	,	-17	,
		71130.00	,	-18	,
		74910.00	,	-19	,
		78910.00	,	-20	,
		83150.00	,	-21	,
		87650.00	,	-22	,
		92420.00	,	-23	,
		97490.00	,	-24	,
		102900.00	,	-25	,
		108600.00	,	-26	,
		114600.00	,	-27	,
		121100.00	,	-28	,
		127900.00	,	-29	,
		135200.00	,	-30	,
		142900.00	,	-31	,
		151200.00	,	-32	,
		159900.00	,	-33	,
		169300.00	,	-34	,
		179200.00	,	-35	,
		189800.00	,	-36	,
		201100.00	,	-37	,
		213100.00	,	-38	,
		226000.00	,	-39	,
		239700.00	,	-40	,
		254300.00	,	-41	,
		270000.00	,	-42	,
		286700.00	,	-43	,
		304500.00	,	-44	,
		323600.00	,	-45	,
		344000.00	,	-46	,
		365900.00	,	-47	,
		389300.00	,	-48	,
		414400.00	,	-49	,
		441200.00	,	-50	,
		470000.00	,	-51	,
		500900.00	,	-52	,
		534000.00	,	-53	,
		569600.00	,	-54	,
		607800.00	,	-55
};


float TempSensor::calc_temperature(int mv){
	Lookup<float> lookup(resistance_to_temp_lookup_table, NUM_ENTRIES);

	const float vcc = 3.3f;
	const float rtop = 10000.0f;
	float vout = mv / 1000.0f;
	float rtemp;

	//first convert mv to resistance using a voltage divider
	rtemp = rtop * vout / (vcc - vout);

	return lookup.calc_value(rtemp);
}
